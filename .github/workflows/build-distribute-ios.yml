name: Build & distribute to iOS

on:
  push:
    branches: [main]
    paths: ["lib/**"]
  workflow_dispatch:

jobs:
  build:
    runs-on: macOS-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "zulu"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.10.5"

      - name: Bump version name & code
        uses: yanamura/ios-bump-version@v1
        with:
          version: 1.0.0
          project-path: ios
          build-number: ${{ github.run_number }}

      - name: Install the Apple certificate and provisioning profile
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision 
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build IPA
        run: |
          flutter --version
          flutter pub get
          xcrun xcodebuild -showBuildSettings -workspace ./ios/Runner.xcworkspace -scheme Runner -configuration Release
          flutter build ipa --export-method development
          mkdir -p dist
          mv ./build/ios/ipa/rse.ipa dist/rse.ipa
          # zip -r -9 dist/dSYMs.zip build/ios/archive/Runner.xcarchive/dSYMs

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-ipa
          path: dist

  # * A linux machine is needed firebase app distribution action.
  # * Benefit of allowing us rerun only failing jobs when we've configured environments incorrectly though.
  distribute:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: built-ipa
          path: dist

      - name: Upload to Firebase App Distribution
        uses: w9jds/firebase-action@v11.5.0
        with:
          args: appdistribution:distribute dist/rse.ipa --app ${{ secrets.FIREBASE_APP_ID_IOS }} --groups ${{ vars.FIREBASE_TEST_GROUPS }}
        env:
          GCP_SA_KEY: ${{ secrets.FIREBASE_TOKEN }}

      # TODO: Add DSYM to Crashlytics
      # - name: Upload dSYMs to Crashlytics
      #   uses: w9jds/firebase-action@v11.5.0
      #   with:
      #     args: appdistribution:upload-symbols --app ${{ secrets.FIREBASE_APP_ID_IOS }} --debug-symbols dist/dSYMs.zip
      #   env:
      #     GCP_SA_KEY: ${{ secrets.FIREBASE_TOKEN }}
