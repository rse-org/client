name: Run tests & code analysis

on:
  push:
    branches: [main, feature/*, hotfix/*, bugfix/*]
    paths: ['lib/**']
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  run-tests-and-code-analysis:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage_report.outputs.coverage }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.5'

      - name: Install packages
        run: flutter pub get

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: |
          flutter test --coverage

      - name: Generate coverage report
        id: coverage_report
        run: |
          flutter pub global activate test_cov_console
          flutter pub global run test_cov_console -c
          dart pub global activate remove_from_coverage
          remove_from_coverage -f coverage/lcov.info -r '.*\.g\.dart'
          export coverage="$(python scripts/coverage.py | tr '\n' ' ' | cut -d' ' -f2-)"

          # Value of COV:
          echo $coverage

          # Value for next step:
          # Makes coverage: ${{ steps.coverage_report.outputs.coverage }} work.
          echo "coverage='$coverage'" >> "$GITHUB_OUTPUT"

  update-badges:
    needs: run-tests-and-code-analysis
    runs-on: ubuntu-latest
    # if: ${{ github.ref == 'refs/heads/main' && needs.run-tests-and-code-analysis.result == 'success' }}

    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Create Badges
        shell: bash
        env:
          coverage: ${{ needs.run-tests-and-code-analysis.outputs.coverage }}
        run: |
          npm i -g badgen-cli

          # Both available
          echo "Bash syntax: $coverage"
          echo "Brace syntax: ${{ env.coverage }}"

          echo $GITHUB_OUTPUT

          COLOR=$(node -p "const cov = process.env.coverage.split(' ')[1]; +cov >= 95 ? 'green' : 'orange'")

          mkdir -p badges
          badgen -j "code coverage" -i github -s "${coverage#*: }%" -c $COLOR > badges/coverage.svg

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Deploy Badges
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update badges [skip ci]
